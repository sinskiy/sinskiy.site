---
import type { CollectionEntry } from "astro:content";
import OutwardArrow from "../components/icons/outward-arrow.svg";
import { Image } from "astro:assets";
import { ImageMetadata } from "astro";

type Project = CollectionEntry<"projects">["data"];

interface Props extends Project {
  href: string;
  title: string;
  src: ImageMetadata;
}
const { href, title, src } = Astro.props;
---

<a
  href={href}
  target="_blank"
  aria-label={`visit ${title} demo`}
  class="image-wrapper"
>
  <div class="arrow-wrapper">
    <OutwardArrow />
  </div>
  <Image src={src} alt="" class="image" />
  <div class="glow"></div>
</a>

<style>
  .image-wrapper {
    flex: 1;
    position: relative;
    min-width: 200px;
    aspect-ratio: 5 / 3;
    background-color: rgb(var(--surface));
    border-radius: var(--rounded-lg);
    box-shadow: 0 0 5px var(--shadow);
    display: grid;
    place-items: center;

    transition:
      transform 100ms ease-out,
      box-shadow 150ms ease-out;
    transform-style: preserve-3d;
    transform: perspective(1500px)
      scale3d(var(--scale), var(--scale), var(--scale))
      rotate3d(var(--rotateY), var(--rotateX), 0, var(--distance));
  }
  .image-wrapper:hover {
    box-shadow: 0 5px 20px 5px var(--shadow);
  }
  .png {
    height: min-content;
  }
  .png .image {
    border-radius: inherit;
  }

  .image {
    height: min-content;
    transform: translateZ(32px);
  }

  .arrow-wrapper {
    position: absolute;
    top: 1rem;
    right: 1rem;
    width: 1.75rem;
    height: 1.75rem;
    background-color: rgb(var(--surface-high));
    border-radius: var(--rounded-full);
    display: grid;
    place-items: center;
  }
  .arrow-wrapper > :global(svg) {
    fill: rgb(var(--foreground-variant));
  }

  .image-wrapper:hover .arrow-wrapper {
    background-color: rgb(var(--primary));
  }
  .image-wrapper:hover .arrow-wrapper > :global(svg) {
    fill: rgb(var(--on-primary));
  }

  .glow {
    position: absolute;
    inset: 0;
    background-image: radial-gradient(
      circle at var(--x) var(--y),
      var(--glow),
      rgb(0 0 0 / 0.01)
    );
  }
</style>
