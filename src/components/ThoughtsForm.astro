<form id="thoughts-form">
  <h2>new thought</h2>
  <p id="error-container"></p>
  <div class="input-field">
    <label for="username">username</label>
    <input type="text" name="username" id="username" maxlength="100" required />
  </div>
  <div class="input-field">
    <label for="message">message</label>
    <textarea name="message" id="message" rows="5"  maxlength="1000" required></textarea>
    <p class="description">tip: use markdown</p>
  </div>
  <button type="submit">post</button>
</form>

<style>
  form {
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  button {
    background-color: rgb(var(--primary));
    color: rgb(var(--on-primary));
    padding: 0.5rem 3rem;
    border-radius: var(--rounded-full);
    font-weight: 500;
    transition:
      opacity 100ms,
      transform 150ms;
  }
  button:hover {
    opacity: 0.5;
  }
  button:active {
    transform: scale(0.95);
  }

  .input-field {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  label {
    font-weight: 500;
    color: rgb(var(--foreground-variant));
  }

  input[type="text"],
  textarea {
    padding: 0.75rem 1.5rem;
    border: none;
    outline: 1px solid rgb(var(--outline));
    background-color: transparent;
    font-size: 1.5rem;
    border-radius: var(--rounded-lg);
  }

  textarea {
    resize: vertical;
  }

  .description {
    font-size: 0.875rem;
    color: rgb(var(--foreground-variant));
  }
</style>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  const searchParams = new URLSearchParams(window.location.search);
  const id = decodeURIComponent(searchParams.get("id") ?? "")
  const oldUsername = decodeURIComponent(searchParams.get("old-username") ?? "")
  const oldMessage = decodeURIComponent(searchParams.get("old-message") ?? "")
  const username = document.querySelector<HTMLInputElement>("input#username")
  const message = document.querySelector<HTMLTextAreaElement>("textarea#message")
  const isEditMode = id && oldUsername && oldMessage
  if (isEditMode && username &&message) {
    username.value = oldUsername;
    message.value = oldMessage;
  }
  
  const form = document.querySelector<HTMLFormElement>("#thoughts-form");
  const errorContainer = document.querySelector<HTMLParagraphElement>("#error-container");
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    const formData = new FormData(form);
    
    const post = window.location.pathname.split("/")[2]; // ['', 'post-thought', '<blog>']
    const username = formData.get("username") as string
    const message = formData.get("message") as string
    const { error } = isEditMode ? await actions.editThought({ id, newUsername: username, newMessage: message}) : await actions.postThought({ username, message, post });
    if (!error) {
      console.log(window.location.pathname)
      navigate(post ? `/posts/${post}` : "/");
    } else if (error && errorContainer) {
      errorContainer.textContent = error.message;
    }
  })
</script>
